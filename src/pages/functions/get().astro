---
import { Page, Block,  Code } from '../../components/DocPage.js';
import { Each, Insertion, Identifier, Item, String, Var } from '../../components/Links.js';
---

<Page title="get()">
  <Block>
    <p>the <strong>get()</strong> function is used to derive a value from another value. The get() function has 3 signatures, with the latter two being syntactic sugar.</p>
  </Block>

  <section>
    <h2>get(value, callback)</h2>
    <Block>
      <p>This is the lowest form of get(), using a callback function to derive a value.</p>
      <p>The <strong>first argument</strong> is a value of any type. The <strong>second argument</strong> is a function that receives the first argument and returns a derived value.</p>
      <Code slot="code" lang="js" code={`
.profile {
  --user: \${{ name: 'Wilbur' }};

  text: get(var(--user), \${user => user.name});
}
`} />
    </Block>

    <h3>Deriving a non-object value</h3>
    <Block>
      <p>You can use <strong>get()</strong> to derive from any value, not just objects. In this example we are creating an uppercase version of the user's name. The second argument receives the <String /> name, and returns another string.</p>
      <Code slot="code" lang="js" code={`
.profile .title {
  --name: "Wilbur";
  text: get(var(--name), \${name => name.toUpperCase()});
} 
`} />
    </Block>
  </section>

  <section>
    <h2>get(value, prop)</h2>
    <Block>
      <p>The second signature of get() is like the first, but instead of taking a callback function, it takes a property.</p>
      <p>The <strong>first argument</strong> is a value of any type. The <strong>second argument</strong> is the property name to get. This can be provided as an <Identifier />, a <String />, a <Var />, or any other way that a string value can be passed.</p>
      <Code slot="code" lang="js" code={`
.profile {
  --user: \${{ name: 'Wilbur' }};

  text: get(var(--user), name);
} 
`} />
    </Block>
  </section>

  <section>
    <h2>get(prop)</h2>
    <Block>
      <p>The third signature of get() takes on a property name, as the <strong>first argument</strong>. It implicitly users <Item /> as the first argument and is used only within an <Each /> scope.</p>
           <Code slot="code" lang="js" code={`
.users {
  each: var(--users) select(.user-template);
}

.user .profile {
  text: get(name);
}
`} />
    </Block>
  </section>
</Page>