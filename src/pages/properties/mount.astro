---
import { Page, Block, Code } from '../../components/DocPage.js';
import { Get, Sheet, Var } from '../../components/Links.js';
import * as info from '../../info.js';
---
<Page title="mount">
  <Block>
    <p>The <strong>mount</strong> property is used to attach an updater function to an element. It is equivalent to using the <a href="/exports/mount/">mount import</a> of the { info.project } package.</p>
    <p>An updater function is like a component in a template-based framework. Each updater function is given a state object that, when mutated, reruns the function to derive new state and update the DOM.</p>
  </Block>
  <Block>
    <p>Use mount when you have a block of HTML that needs behavior and is repeated multiple times. You do not need to use mount in these cases, but it can help with breaking up your app into smaller pieces.</p>
    <p>Here we have a block of HTML that includes a counter widget.</p>
    <Code slot="code" lang="html" code={`
<div class="counter">
  Count is <span class="count"></span>
  
  <button type="button" class="increment">Increment</button>
</div>
`} />
  </Block>
  <Block>
    <p>To bind to mount, in the top-level mount point, use the <strong>mount</strong> property when targeting the element countaining the counter widget.</p>
    <p>The <em>value</em> of mount is an updater function. This is a function that takes a state object (an empty object initially), and returns a <Sheet />.</p>
    <p>The function runs any time the state changes. This can be achieved by setting a value on the state object (<code>state.foo = 'bar';</code>). In this example state is changing in the click event handler <code>increment</code>. It first checks to see if the state object has a count, and if not increment the initial value rather than the previous count.</p>
    <p>Unlike in components, there are no "props" here. Instead to pass values to an updater function, use regular <Var plural />. Here the initial value is passed via the <code>--initial</code> var. Using <Get /> we are able to determine if we should use the initial value or not (if no state changes have occurred).</p>
    <Code slot="code" lang="js" code = {`
import sheet, { mount } from '${info.cdnURL}';

function Counter(state) {
  const { count } = state;

  const getCount = (initial) => 
    count == null ? initial : count;

  const increment = (initial) => {
    state.count = count == null
      ? initial + 1
      : count + 1;
  }

  return sheet\`
    .count {
      --count: get(var(--initial), \${getCount});
      text: var(--count);
    }

    .increment {
      --cb: bind(\${increment}, var(--initial));
      event: click var(--cb);
    }
  \`;
}

mount(document.body, () => {
  return sheet\`
    .counter {
      mount: \${Counter};
    }
  \`;
})
`} />
  </Block>
</Page>