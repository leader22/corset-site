---
import CommonHead from '../components/CommonHead.astro';
import NavHeader from '../components/NavHeader.astro';
import Code from '../components/Code.astro';
import * as info from '../info.js';
---

<html lang="en">
<head>
	<CommonHead />
	<title>{ info.project } - Declarative reactive UI without the complexity of SPAs</title>
	<base href=".">
	<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/prism-theme-night-owl@1.4.0/build/style.min.css">
	<style global>
		@import "../styles/main.css";
	</style>
</head>
<body class="welcome">
	<NavHeader title={ info.project } />
	<header class="hero-header">
		<section class="hero">
			<h1 class="hero-message">
				<div>{ info.project }</div>
				<div>Cascading binding sheets</div>
			</h1>
			<p class="under-hero">Reactive UI without the complexity of <abbr title="Single-page application">SPA</abbr> frameworks. Use any backend you like; bind to the HTML you already produced.</p>
			<div class="button-list">
				<a href="installation/" class="primary button">Get started</a>
				<a href="api/" class="button">Documentation</a>
			</div>
		</section>
	</header>
	<article class="example">
		<header>
      <h2>Bring your HTML to life.</h2>
      <p class="explanation">Corset binds JavaScript to HTML. It doesn't matter how the HTML is produced and Corset doesn't need to own your templating choice. Instead it uses a CSS-like syntax to enhance whatever you give it.</p>
    </header>

		<div class="block-wrap">
      <Code lang="html" title="HTML" code={`
<div class="counter">
  <button
    type="button"
    class="increment">Increment</button>
  <button
    type="button"
    class="decrement"
    disabled>Decrement</button>

  <div
    class="result">
    Count: <strong class="count">0</strong>
	</div>
</div>
`} />
    <Code lang="js" title="JavaScript with Corset" code={`
import sheet, { mount } from '${info.cdnURL}';

mount(document, state => {
  const { count = 0 } = state;

  return sheet\`
    .counter {
      --count: \${count};
      --inc: \${() => state.count = count + 1};
      --dec: \${() => state.count = count - 1};
    }
    
    .count {
      text: var(--count);
    }
    
    .increment {
      event: click var(--inc);
    }
    
    .decrement {
      attr-toggle: disabled \${count === 0};
      event: click var(--dec);
    }
  \`;
});
`} />
		</div>

    <a href="https://codepen.io/matthewp/pen/dyVeNrJ"><em>CodePen ðŸ‘‰</em></a>
	</article>
</body>
</html>
